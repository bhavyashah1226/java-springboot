# ********RoostGPT********

# Test generated by RoostGPT for test MultipleApiSpec using AI Type Open AI and AI Model gpt-4
# 
# Feature file generated for /api/device/camera/alert_post for http method type POST 
# RoostTestHash=ba1d0a9484
# 
# 

# ********RoostGPT********
Feature: Camera Alert API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase
  * def authToken = karate.properties['auth.token'] || karate.get('authToken', 'YOUR_DEFAULT_AUTH_TOKEN')
  * configure headers = { Authorization: '#(authToken)' }

Scenario: Test Camera Alert API with valid request body
  Given path '/api/device/camera/alert'
  And request { jetson_uuid: 'd290f1ee-6c54-4b01-90e6-d701748f0851', camera_id: '9a48824e-829d-11ee-b962-0242ac120002', status: 'offline', timestamp: '2023-11-29T09:12:33.001Z' }
  When method post
  Then status 201
  And match response == { description: 'alert created' }

Scenario Outline: Test Camera Alert API with invalid request body
  Given path '/api/device/camera/alert'
  And request <body>
  When method post
  Then status 400
  And match response == { description: 'invalid input, object invalid' }

  Examples:
    | body                                                                                                    |
    | { jetson_uuid: '', camera_id: '9a48824e-829d-11ee-b962-0242ac120002', status: 'offline', timestamp: '2023-11-29T09:12:33.001Z' } |
    | { jetson_uuid: 'd290f1ee-6c54-4b01-90e6-d701748f0851', camera_id: '', status: 'offline', timestamp: '2023-11-29T09:12:33.001Z' } |
    | { jetson_uuid: 'd290f1ee-6c54-4b01-90e6-d701748f0851', camera_id: '9a48824e-829d-11ee-b962-0242ac120002', status: '', timestamp: '2023-11-29T09:12:33.001Z' } |
    | { jetson_uuid: 'd290f1ee-6c54-4b01-90e6-d701748f0851', camera_id: '9a48824e-829d-11ee-b962-0242ac120002', status: 'offline', timestamp: '' } |
