# ********RoostGPT********

# Test generated by RoostGPT for test MultipleApiSpec using AI Type Open AI and AI Model gpt-4
# 
# Feature file generated for /api/device/camera/alert_post for http method type POST 
# RoostTestHash=ba1d0a9484
# 
# 

# ********RoostGPT********
Feature: Camera Alert API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase
  * def authToken = karate.properties['auth.token'] || karate.get('authToken', 'YOUR_DEFAULT_AUTH_TOKEN')
  * configure headers = { Authorization: '#(authToken)' }

Scenario: Test POST /api/device/camera/alert with valid request body
  Given path '/api/device/camera/alert'
  And request { "jetson_uuid": "d290f1ee-6c54-4b01-90e6-d701748f0851", "camera_id": "9a48824e-829d-11ee-b962-0242ac120002", "status": "offline", "timestamp": "2023-11-29T09:12:33.001Z" }
  When method post
  Then status 201
  And match response == { "description": "alert created" }

Scenario Outline: Test POST /api/device/camera/alert with various request bodies
  Given path '/api/device/camera/alert'
  And request { "jetson_uuid": "<jetson_uuid>", "camera_id": "<camera_id>", "status": "<status>", "timestamp": "<timestamp>" }
  When method post
  * def expectedStatus = (<status> == 'offline') ? 201 : 400
  Then status expectedStatus
  And match response.description contains ((<status> == 'offline') ? 'alert created' : 'invalid input, object invalid')

  Examples:
    | jetson_uuid                          | camera_id                          | status  | timestamp             |
    | "d290f1ee-6c54-4b01-90e6-d701748f0851" | "9a48824e-829d-11ee-b962-0242ac120002" | "offline" | "2023-11-29T09:12:33.001Z" |
    | "d290f1ee-6c54-4b01-90e6-d701748f0851" | "9a48824e-829d-11ee-b962-0242ac120002" | "online"  | "2023-11-29T09:12:33.001Z" |
    | "d290f1ee-6c54-4b01-90e6-d701748f0851" | "9a48824e-829d-11ee-b962-0242ac120002" | "invalid" | "2023-11-29T09:12:33.001Z" |
