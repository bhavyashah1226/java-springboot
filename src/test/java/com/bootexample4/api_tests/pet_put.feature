# ********RoostGPT********

# Test generated by RoostGPT for test products-karate using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /pet_put for http method type PUT 
# RoostTestHash=3c023e4a7b
# 
# 

# ********RoostGPT********
Feature: Testing the /v2/pet endpoint

Background:
  * def Auth_Token = karate.properties['AUTH_TOKEN']
  * configure headers = { Authorization: '#(Auth_Token)' }
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase

Scenario: Verify if a pet object can be updated using a valid request body

  Given path '/v2/pet'
  * def pet = 
    """
    {
      "id": 1,
      "category": {
        "id": 1,
        "name": "Dogs"
      },
      "name": "doggie",
      "photoUrls": ["url1", "url2"],
      "tags": [
        {
          "id": 1,
          "name": "tag1"
        },
        {
          "id": 2,
          "name": "tag2"
        }
      ],
      "status": "available"
    }
    """
  And request pet
  When method put
  Then status 200
  And assert response.name == 'doggie'
  And assert response.status == 'available'
  And assert response.photoUrls[0] == 'url1'
  And assert response.photoUrls[1] == 'url2'
  And match response.tags contains { "id": '#number', "name": '#string' }

Scenario: Attempt to update a pet object using an invalid request body

  Given path '/v2/pet'
  And request { "invalid_key": "invalid_value" }
  When method put
  Then status 400

Scenario: Verify the endpoint response when a pet object is not found

  Given path '/v2/pet'
  And request
    """
    {
      "id": 9999999,
      "name": "nonExistentPet"
    }
    """
  When method put
  Then status 404
