# ********RoostGPT********

# Test generated by RoostGPT for test products-karate using AI Type Open AI and AI Model gpt-4
# 
# Feature file generated for /pet_post for http method type POST 
# RoostTestHash=988c5ab2ac
# 
# 

# ********RoostGPT********
Feature: Testing /v2/pet API

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
    * url urlBase
    * def authToken = karate.properties['auth.token'] || karate.get('authToken', 'dummyToken')
    * configure headers = { Authorization: '#(authToken)' }

  Scenario: Add a new pet to the store
    Given path '/v2/pet'
    And request { "id": 1, "category": { "id": 1, "name": "Dog" }, "name": "doggie", "photoUrls": [ "url1", "url2" ], "tags": [ { "id": 1, "name": "tag1" }, { "id": 2, "name": "tag2" } ], "status": "available" }
    When method post
    Then status 200
    And match response == { "id": '#number', "category": { "id": '#number', "name": '#string' }, "name": '#string', "photoUrls": '#[]', "tags": '#[]', "status": '#string' }

  Scenario: Add a new pet to the store with invalid input
    Given path '/v2/pet'
    And request { "id": 1, "category": { "id": 1, "name": "Dog" }, "name": "", "photoUrls": [ "url1", "url2" ], "tags": [ { "id": 1, "name": "tag1" }, { "id": 2, "name": "tag2" } ], "status": "available" }
    When method post
    Then status 405
