/*
Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Valid Product
Given a valid Product object, when the `createProduct` method is called, then the product should be persisted in the product repository.

Test Scenario 2: Null Product
Given a null Product object, when the `createProduct` method is called, then the method should throw an IllegalArgumentException or similar exception, as a null product cannot be saved.

Test Scenario 3: Product with Null Fields
Given a Product object where one or more fields are null (if those fields are mandatory according to your business logic), when the `createProduct` method is called, then the method should throw an IllegalArgumentException or similar exception, as a product with null mandatory fields cannot be saved.

Test Scenario 4: Product with Invalid Data
Given a Product object where one or more fields contain invalid data (e.g., a negative price, a name that's too long according to your business rules), when the `createProduct` method is called, then the method should throw an IllegalArgumentException or similar exception.

Test Scenario 5: Duplicate Product
Given a Product object that is identical to an already existing product in the repository, when the `createProduct` method is called, then the method should throw a DuplicateProductException or similar, as it should not be possible to save identical products.

Test Scenario 6: Product Repository Unavailable
If the product repository is unavailable (e.g., due to a network issue), when the `createProduct` method is called, then the method should throw a RepositoryUnavailableException or similar exception. 

Test Scenario 7: Empty Product
Given an empty Product object, when the `createProduct` method is called, then the method should throw an IllegalArgumentException or similar exception, as an empty product cannot be saved.
*/
package com.bootexample4.products.controller;

import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import com.bootexample4.products.model.Product;
import com.bootexample4.products.repository.ProductRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class ProductController_createProduct_36b748883e_Test {

    @InjectMocks
    private ProductController productController;

    @Mock
    private ProductRepository productRepository;

    private Product product;

    @BeforeEach
    public void setUp() {
        product = new Product();
        product.setId(1L);
        product.setName("TestProduct");
        product.setDescription("TestDescription");
        product.setPrice(100.0);
    }

    @Test
    public void testCreateProduct_ValidProduct() {
        when(productRepository.save(product)).thenReturn(product);

        Product result = productController.createProduct(product);
        assertEquals(result, product);
    }

    @Test
    public void testCreateProduct_NullProduct() {
        assertThrows(IllegalArgumentException.class, () -> {
            productController.createProduct(null);
        });
    }

    @Test
    public void testCreateProduct_ProductWithNullFields() {
        product.setName(null);
        assertThrows(IllegalArgumentException.class, () -> {
            productController.createProduct(product);
        });
    }

    @Test
    public void testCreateProduct_ProductWithInvalidData() {
        product.setPrice(-100.0);
        assertThrows(IllegalArgumentException.class, () -> {
            productController.createProduct(product);
        });
    }

    @Test
    public void testCreateProduct_DuplicateProduct() {
        when(productRepository.save(product)).thenReturn(product);
        productController.createProduct(product);
        assertThrows(DuplicateProductException.class, () -> {
            productController.createProduct(product);
        });
    }

    @Test
    public void testCreateProduct_ProductRepositoryUnavailable() {
        when(productRepository.save(product)).thenThrow(RepositoryUnavailableException.class);
        assertThrows(RepositoryUnavailableException.class, () -> {
            productController.createProduct(product);
        });
    }

    @Test
    public void testCreateProduct_EmptyProduct() {
        Product emptyProduct = new Product();
        assertThrows(IllegalArgumentException.class, () -> {
            productController.createProduct(emptyProduct);
        });
    }
}
