/*
Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

Test Scenarios:

1. Test with valid product ID: 
   - Input: Pass a valid product ID that exists in the productRepository.
   - Expected Output: The function should return a ResponseEntity with the correct product and a status of 200 (OK).

2. Test with invalid product ID:
   - Input: Pass an invalid product ID that does not exist in the productRepository.
   - Expected Output: The function should return a ResponseEntity with a status of 404 (Not Found).

3. Test with null product ID:
   - Input: Pass a null product ID.
   - Expected Output: The function should handle the null input appropriately, possibly by returning a ResponseEntity with a status of 404 (Not Found) or 400 (Bad Request).

4. Test with negative product ID:
   - Input: Pass a negative product ID.
   - Expected Output: The function should handle the invalid input appropriately, possibly by returning a ResponseEntity with a status of 404 (Not Found) or 400 (Bad Request).

5. Test with product ID of a product that was previously in the repository but has been removed:
   - Input: Pass a product ID that was valid at some point in the past, but the corresponding product has since been removed from the productRepository.
   - Expected Output: The function should return a ResponseEntity with a status of 404 (Not Found).

6. Test with product ID as zero:
   - Input: Pass a product ID as zero.
   - Expected Output: The function should handle the invalid input appropriately, possibly by returning a ResponseEntity with a status of 404 (Not Found) or 400 (Bad Request).

7. Test with product ID as very large number:
   - Input: Pass a very large number as product ID.
   - Expected Output: The function should handle the invalid input appropriately, possibly by returning a ResponseEntity with a status of 404 (Not Found) or 400 (Bad Request).

8. Test the function while the productRepository is empty:
   - Input: Call the function while the productRepository is empty.
   - Expected Output: Regardless of the product ID passed, the function should return a ResponseEntity with a status of 404 (Not Found).
*/
package com.bootexample4.products.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.util.Optional;

import com.bootexample4.products.model.Product;
import com.bootexample4.products.repository.ProductRepository;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

public class ProductController_getProductById_d22f3ea272_Test {

    @InjectMocks
    ProductController productController;

    @Mock
    ProductRepository productRepository;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetProductById_ValidId() {
        Product product = new Product();
        product.setId(1L);
        when(productRepository.findById(1L)).thenReturn(Optional.of(product));

        ResponseEntity<Product> response = productController.getProductById(1L);

        assertEquals(200, response.getStatusCodeValue());
        assertEquals(1L, response.getBody().getId());
    }

    @Test
    public void testGetProductById_InvalidId() {
        when(productRepository.findById(1L)).thenReturn(Optional.empty());

        ResponseEntity<Product> response = productController.getProductById(1L);

        assertEquals(404, response.getStatusCodeValue());
    }

    @Test
    public void testGetProductById_NullId() {
        ResponseEntity<Product> response = productController.getProductById(null);

        assertEquals(400, response.getStatusCodeValue());
    }

    @Test
    public void testGetProductById_NegativeId() {
        ResponseEntity<Product> response = productController.getProductById(-1L);

        assertEquals(400, response.getStatusCodeValue());
    }

    @Test
    public void testGetProductById_RemovedProductId() {
        when(productRepository.findById(1L)).thenReturn(Optional.empty());

        ResponseEntity<Product> response = productController.getProductById(1L);

        assertEquals(404, response.getStatusCodeValue());
    }

    @Test
    public void testGetProductById_ZeroId() {
        ResponseEntity<Product> response = productController.getProductById(0L);

        assertEquals(400, response.getStatusCodeValue());
    }

    @Test
    public void testGetProductById_LargeId() {
        ResponseEntity<Product> response = productController.getProductById(Long.MAX_VALUE);

        assertEquals(400, response.getStatusCodeValue());
    }

    @Test
    public void testGetProductById_EmptyRepository() {
        when(productRepository.findById(1L)).thenReturn(Optional.empty());

        ResponseEntity<Product> response = productController.getProductById(1L);

        assertEquals(404, response.getStatusCodeValue());
    }
}
