/*
Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

Test Scenario 1: 
Product with given ID exists
- Given a product with ID exists in the repository
- When the deleteProduct method is called with this ID
- Then the product should be deleted from the repository
- And the method should return a ResponseEntity with HTTP status code 200 OK

Test Scenario 2: 
Product with given ID does not exist
- Given no product with the provided ID exists in the repository
- When the deleteProduct method is called with this ID
- Then no product should be deleted from the repository (as there is no product with the provided ID)
- And the method should return a ResponseEntity with HTTP status code 404 Not Found

Test Scenario 3: 
Repository is empty
- Given the product repository is empty
- When the deleteProduct method is called with any ID
- Then no product should be deleted from the repository (as the repository is empty)
- And the method should return a ResponseEntity with HTTP status code 404 Not Found

Test Scenario 4: 
Product ID is null
- Given a product with null ID
- When the deleteProduct method is called with null
- Then the method should handle it appropriately (possibly throw an exception or return a particular ResponseEntity)

Test Scenario 5: 
Product ID is negative
- Given a product with negative ID
- When the deleteProduct method is called with a negative number
- Then the method should handle it appropriately (possibly throw an exception or return a particular ResponseEntity)
*/
package com.bootexample4.products.controller;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;
import org.springframework.test.util.ReflectionTestUtils;

import com.bootexample4.products.model.Product;
import com.bootexample4.products.repository.ProductRepository;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Optional;

@ExtendWith(MockitoExtension.class)
public class ProductController_deleteProduct_dcaff736d4_Test {

    @Mock
    private ProductRepository productRepository;

    @InjectMocks
    private ProductController controller;

    private Product product;

    @BeforeEach
    public void setUp() {
        product = new Product();
        ReflectionTestUtils.setField(product, "id", 1L);
    }

    @Test
    public void testDeleteProductWhenProductExists() {
        when(productRepository.findById(any(Long.class))).thenReturn(Optional.of(product));

        ResponseEntity<Object> response = controller.deleteProduct(1L);

        assertEquals(200, response.getStatusCodeValue());
        verify(productRepository, times(1)).delete(product);
    }

    @Test
    public void testDeleteProductWhenProductDoesNotExist() {
        when(productRepository.findById(any(Long.class))).thenReturn(Optional.empty());

        ResponseEntity<Object> response = controller.deleteProduct(1L);

        assertEquals(404, response.getStatusCodeValue());
        verify(productRepository, times(0)).delete(any(Product.class));
    }

    @Test
    public void testDeleteProductWhenIdIsNull() {
        assertThrows(IllegalArgumentException.class, () -> controller.deleteProduct(null));
    }

    @Test
    public void testDeleteProductWhenIdIsNegative() {
        assertThrows(IllegalArgumentException.class, () -> controller.deleteProduct(-1L));
    }
}
