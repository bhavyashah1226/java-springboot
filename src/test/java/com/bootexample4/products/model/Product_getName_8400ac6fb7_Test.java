/*
Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

1. Null Scenario: Test when the `name` field is null. The getName function should return null.
2. Empty String Scenario: Test when the `name` field is an empty string. The getName function should return an empty string.
3. Valid String Scenario: Test when the `name` field contains a valid string. The getName function should return the same string.
4. Special Characters Scenario: Test when the `name` field contains special characters. The getName function should return the string with special characters.
5. Numeric String Scenario: Test when the `name` field contains a numeric string. The getName function should return the numeric string.
6. Long String Scenario: Test when the `name` field contains a very long string. The getName function should return the long string.
7. Unicode Characters Scenario: Test when the `name` field contains unicode characters. The getName function should return the string with unicode characters.
8. White Spaces Scenario: Test when the `name` field contains white spaces. The getName function should return the string with white spaces.
9. Non-English Characters Scenario: Test when the `name` field contains non-English characters. The getName function should return the string with non-English characters.
*/
package com.bootexample4.products.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;

@SpringBootTest
public class Product_getName_8400ac6fb7_Test {

    public class Product {
        private Long id;
        private String name;
        private String description;
        private double price;

        public Product() {}

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }

    static Stream<String> productNameProvider() {
        return Stream.of(null, "", "Product Name", "!@#$%^&*()_+", "1234567890", 
                         "This is a very long product name that exceeds the usual length",
                         "\u263A", "     ", "非英文字符");
    }

    @ParameterizedTest
    @MethodSource("productNameProvider")
    public void testGetName(String name) {
        Product product = new Product();
        product.setName(name);
        assertEquals(name, product.getName());
    }
}
