/*
Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

1. Null Scenario: Test when the `name` field is null. The getName function should return null.
2. Empty String Scenario: Test when the `name` field is an empty string. The getName function should return an empty string.
3. Valid String Scenario: Test when the `name` field is a valid string. The getName function should return the same string.
4. Special Characters Scenario: Test when the `name` field contains special characters. The getName function should return the string with special characters.
5. Numeric String Scenario: Test when the `name` field is a numeric string. The getName function should return the numeric string.
6. Long String Scenario: Test when the `name` field is a very long string. The getName function should return the long string.
7. Unicode Characters Scenario: Test when the `name` field contains unicode characters. The getName function should return the string with unicode characters.
8. White Spaces Scenario: Test when the `name` field contains leading or trailing white spaces. The getName function should return the string as is, including the white spaces.
9. Case Sensitivity Scenario: Test when the `name` field contains mixed case letters. The getName function should return the string preserving the case.
10. Immutable Scenario: Test if the `name` field remains unchanged after calling the getName function multiple times. The getName function should always return the same value regardless of how many times it is called.
*/
package com.bootexample4.products.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class Product_getName_8400ac6fb7_Test {

    private Product product;

    @BeforeEach
    void setUp() {
        product = new Product();
    }

    @ParameterizedTest
    @MethodSource("provideTestScenarios")
    void testGetName(String input, String expected) {
        product.setName(input);
        String actual = product.getName();
        assertNotNull(actual);
        assertEquals(expected, actual);
    }

    private static Stream<Object[]> provideTestScenarios() {
        return Stream.of(
                new Object[]{null, null},
                new Object[]{"", ""},
                new Object[]{"valid string", "valid string"},
                new Object[]{"$%&*", "$%&*"},
                new Object[]{"12345", "12345"},
                new Object[]{"a".repeat(1000), "a".repeat(1000)},
                new Object[]{"\u263A", "\u263A"},
                new Object[]{" leading spaces ", " leading spaces "},
                new Object[]{"MiXeD CaSe", "MiXeD CaSe"}
        );
    }

    @Test
    void testGetNameImmutable() {
        product.setName("immutable");
        String firstCall = product.getName();
        String secondCall = product.getName();
        assertEquals(firstCall, secondCall);
    }
}
