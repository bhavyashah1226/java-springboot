/*
Test generated by RoostGPT for test restAssuredJan24 using AI Type Open AI and AI Model gpt-4

1. Null Scenario: Test the getName() function when the name is null. The function should return null, and it should not throw any NullPointerException.

2. Empty String Scenario: Test the getName() function when the name is an empty string. The function should return an empty string.

3. Normal Scenario: Test the getName() function when the name is a non-empty string. The function should return the exact same string.

4. Special Characters Scenario: Test the getName() function when the name contains special characters. The function should return the string with the special characters.

5. White Spaces Scenario: Test the getName() function when the name contains leading, trailing, or intermediate white spaces. The function should return the string with the white spaces.

6. Numeric Characters Scenario: Test the getName() function when the name contains numeric characters. The function should return the string with the numeric characters.

7. Long String Scenario: Test the getName() function when the name is a very long string. The function should return the full string, and it should not truncate the string.

8. Unicode Characters Scenario: Test the getName() function when the name contains unicode characters. The function should return the string with the unicode characters.

9. Case Sensitivity Scenario: Test the getName() function with names in different cases (lowercase, uppercase, camel case etc.) The function should return the string exactly as it is without changing the case.

10. Multilingual Scenario: Test the getName() function when the name contains non-English characters. The function should return the string with the non-English characters.
*/
package com.bootexample4.products.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

public class Product_getName_8400ac6fb7_Test {

    private Product product;

    @BeforeEach
    public void setup() {
        product = new Product();
    }

    @Test
    public void testGetName_Null() {
        product.setName(null);
        assertNull(product.getName());
    }

    @Test
    public void testGetName_Empty() {
        product.setName("");
        assertEquals("", product.getName());
    }

    @Test
    public void testGetName_Normal() {
        product.setName("iPhone");
        assertEquals("iPhone", product.getName());
    }

    @Test
    public void testGetName_SpecialCharacters() {
        product.setName("@#*!");
        assertEquals("@#*!", product.getName());
    }

    @Test
    public void testGetName_WhiteSpaces() {
        product.setName(" iPhone ");
        assertEquals(" iPhone ", product.getName());
    }

    @Test
    public void testGetName_NumericCharacters() {
        product.setName("1234");
        assertEquals("1234", product.getName());
    }

    @Test
    public void testGetName_LongString() {
        String longName = new String(new char[1000]).replace("\0", "a");
        product.setName(longName);
        assertEquals(longName, product.getName());
    }

    @Test
    public void testGetName_UnicodeCharacters() {
        product.setName("\u0068\u0065\u006C\u006C\u006F");
        assertEquals("\u0068\u0065\u006C\u006C\u006F", product.getName());
    }

    @Test
    public void testGetName_CaseSensitivity() {
        product.setName("iPhone");
        assertEquals("iPhone", product.getName());
    }

    @Test
    public void testGetName_Multilingual() {
        product.setName("Привет");
        assertEquals("Привет", product.getName());
    }
}
