/*
Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function accepts null values.
   Test Case: Set the name as null and verify if the function accepts it.

2. Scenario: Check if the function accepts empty string.
   Test Case: Set the name as an empty string and verify if the function accepts it.

3. Scenario: Check if the function accepts string with spaces.
   Test Case: Set the name as a string consisting of only spaces and verify if the function accepts it.

4. Scenario: Check if the function accepts string with special characters.
   Test Case: Set the name as a string consisting of special characters and verify if the function accepts it.

5. Scenario: Check if the function accepts string with numbers.
   Test Case: Set the name as a string consisting of numbers and verify if the function accepts it.

6. Scenario: Check if the function accepts string with alphanumeric characters.
   Test Case: Set the name as a string consisting of alphanumeric characters and verify if the function accepts it.

7. Scenario: Check if the function accepts string with unicode characters.
   Test Case: Set the name as a string consisting of unicode characters and verify if the function accepts it.

8. Scenario: Check if the function accepts string with maximum length.
   Test Case: Set the name as a string with maximum permissible length and verify if the function accepts it.

9. Scenario: Check if the function accepts string exceeding maximum length.
   Test Case: Set the name as a string exceeding maximum permissible length and verify if the function rejects it.

10. Scenario: Check if the function maintains the case of the string.
    Test Case: Set the name as a string with a mix of upper and lower case letters and verify if the function maintains the case after setting the name.

11. Scenario: Check if the function trims leading or trailing spaces.
    Test Case: Set the name as a string with leading and trailing spaces and verify if the function trims those spaces.
*/
package com.bootexample4.products.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

class Product_setName_5d23a892d9_Test {

    private Product product;

    @BeforeEach
    void setUp() {
        product = new Product();
    }

    @Test
    void setName_nullValue() {
        product.setName(null);
        assertEquals(null, product.getName());
    }

    @Test
    void setName_emptyString() {
        product.setName("");
        assertEquals("", product.getName());
    }

    @ParameterizedTest
    @ValueSource(strings = {"   ", "    ", "     "})
    void setName_stringWithSpaces(String input) {
        product.setName(input);
        assertEquals(input, product.getName());
    }

    @ParameterizedTest
    @ValueSource(strings = {"@", "#", "$"})
    void setName_stringWithSpecialCharacters(String input) {
        product.setName(input);
        assertEquals(input, product.getName());
    }

    @ParameterizedTest
    @ValueSource(strings = {"123", "456", "7890"})
    void setName_stringWithNumbers(String input) {
        product.setName(input);
        assertEquals(input, product.getName());
    }

    @ParameterizedTest
    @ValueSource(strings = {"abc123", "xyz456", "mno789"})
    void setName_stringWithAlphanumeric(String input) {
        product.setName(input);
        assertEquals(input, product.getName());
    }

    @Test
    void setName_stringWithUnicode() {
        product.setName("\u0061\u0062\u0063");
        assertEquals("\u0061\u0062\u0063", product.getName());
    }

    @Test
    void setName_stringWithMaxLength() {
        String input = new String(new char[255]).replace('\0', 'a');
        product.setName(input);
        assertEquals(input, product.getName());
    }

    @Test
    void setName_stringExceedsMaxLength() {
        String input = new String(new char[256]).replace('\0', 'a');
        assertThrows(IllegalArgumentException.class, () -> product.setName(input));
    }

    @Test
    void setName_stringWithCase() {
        String input = "AbCdEfG";
        product.setName(input);
        assertEquals(input, product.getName());
    }

    @Test
    void setName_stringWithLeadingTrailingSpaces() {
        String input = "   AbCdEfG   ";
        product.setName(input);
        assertEquals(input.trim(), product.getName());
    }
}
