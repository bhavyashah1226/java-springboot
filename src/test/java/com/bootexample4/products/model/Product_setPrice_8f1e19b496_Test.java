/*
Test generated by RoostGPT for test restAssuredJan24 using AI Type Open AI and AI Model gpt-4

1. Scenario: Validate that the price is set correctly.
   Test Steps: Set a price and verify that the same price is returned when retrieved.

2. Scenario: Validate that the price accepts positive values.
   Test Steps: Set a positive price and verify that the price is accepted and stored correctly.

3. Scenario: Validate that the price does not accept negative values.
   Test Steps: Attempt to set a negative price and verify that an appropriate exception or error message is returned.

4. Scenario: Validate that the price accepts decimal values.
   Test Steps: Set a decimal price and verify that it is accepted and stored correctly.

5. Scenario: Validate that the price does not accept non-numeric values.
   Test Steps: Attempt to set a non-numeric value as the price and verify that an appropriate exception or error message is returned.

6. Scenario: Validate that the price can be updated.
   Test Steps: Set a price, change it, and verify that the new price is returned when retrieved.

7. Scenario: Validate that the price can be set to zero.
   Test Steps: Set the price to zero and verify that it is accepted and stored correctly.

8. Scenario: Validate that the price does not accept null values.
   Test Steps: Attempt to set a null value as the price and verify that an appropriate exception or error message is returned.

9. Scenario: Validate that the price handles maximum double value.
   Test Steps: Set the price to the maximum double value and verify that it is accepted and stored correctly.

10. Scenario: Validate that the price handles minimum double value.
    Test Steps: Set the price to the minimum double value and verify that it is accepted and stored correctly.
*/
package com.bootexample4.products.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Product_setPrice_8f1e19b496_Test {

    private Product product;

    @BeforeEach
    public void setUp() {
        product = new Product();
    }
    
    @Test
    public void testSetPrice_CorrectValue() {
        double price = 100.0;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }

    @Test
    public void testSetPrice_PositiveValue() {
        double price = 200.0;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }

    @Test
    public void testSetPrice_NegativeValue() {
        double price = -100.0;
        assertThrows(IllegalArgumentException.class, () -> product.setPrice(price));
    }

    @Test
    public void testSetPrice_DecimalValue() {
        double price = 100.50;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }

    @Test
    public void testSetPrice_UpdateValue() {
        double price = 100.0;
        product.setPrice(price);
        double newPrice = 200.0;
        product.setPrice(newPrice);
        assertEquals(newPrice, product.getPrice());
    }

    @Test
    public void testSetPrice_ZeroValue() {
        double price = 0.0;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }

    @Test
    public void testSetPrice_MaxDoubleValue() {
        double price = Double.MAX_VALUE;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }

    @Test
    public void testSetPrice_MinDoubleValue() {
        double price = Double.MIN_VALUE;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }

}
