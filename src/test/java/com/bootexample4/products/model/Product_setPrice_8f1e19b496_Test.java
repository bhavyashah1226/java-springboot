/*
Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Set a positive price value
   Test to check whether the function accepts and correctly sets a positive price value.

2. Scenario: Set a negative price value
   Test to check how the function handles a negative price value. It may throw an error or exception, or it may incorrectly set the price.

3. Scenario: Set a zero price value
   Test to check how the function handles a price value of zero. The function may or may not accept zero as a valid price.

4. Scenario: Set a very large price value
   Test to check whether the function can handle very large price values without causing overflow errors.

5. Scenario: Set a very small price value
   Test to check whether the function can handle very small price values without causing underflow errors.

6. Scenario: Set a price value with many decimal places
   Test to check how the function handles a price value with many decimal places. It may round the value to a certain number of decimal places, or it may store the exact value.

7. Scenario: Set a price value with no decimal places
   Test to check whether the function correctly handles a price value with no decimal places.

8. Scenario: Set a price value to a non-numeric character
   Test to check how the function handles a non-numeric character as a price value. It should throw an error or exception.

9. Scenario: Set a price value to null
   Test to check how the function handles a null price value. It may throw an error or exception, or it may incorrectly set the price.

10. Scenario: Set a price value to an empty string
    Test to check how the function handles an empty string as a price value. It should throw an error or exception.
*/
package com.bootexample4.products.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;
import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
@ExtendWith(MockitoExtension.class)
public class Product_setPrice_8f1e19b496_Test {

    private Product product;

    @BeforeEach
    public void init() {
        product = new Product();
    }

    @Test
    @DisplayName("Test setting a positive price value")
    public void testSetPositivePrice() {
        double price = 10.0;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }

    @Test
    @DisplayName("Test setting a negative price value")
    public void testSetNegativePrice() {
        double price = -10.0;
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            product.setPrice(price);
        });
        assertEquals("Price cannot be negative", exception.getMessage());
    }

    @Test
    @DisplayName("Test setting a zero price value")
    public void testSetZeroPrice() {
        double price = 0.0;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }

    @Test
    @DisplayName("Test setting a very large price value")
    public void testSetLargePrice() {
        double price = Double.MAX_VALUE;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }

    @Test
    @DisplayName("Test setting a very small price value")
    public void testSetSmallPrice() {
        double price = Double.MIN_VALUE;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }

    @Test
    @DisplayName("Test setting a price value with many decimal places")
    public void testSetPriceWithManyDecimalPlaces() {
        double price = 10.123456789;
        product.setPrice(price);
        assertEquals(price, product.getPrice(), 0.000000001);
    }

    @Test
    @DisplayName("Test setting a price value with no decimal places")
    public void testSetPriceWithNoDecimalPlaces() {
        double price = 10.0;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }
}
