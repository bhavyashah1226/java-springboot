/*
Test generated by RoostGPT for test restAssuredJan24 using AI Type Open AI and AI Model gpt-4

1. Scenario: Test if the getPrice function returns a correct price value.
   Given a price is set, when the getPrice function is called, then it should return the correct price.

2. Scenario: Test if the getPrice function returns a zero value.
   Given the price is not set, when the getPrice function is called, then it should return a zero value.

3. Scenario: Test if the getPrice function returns a negative value.
   Given the price is set to a negative value, when the getPrice function is called, then it should return the negative value.

4. Scenario: Test if the getPrice function returns a value with decimal places.
   Given the price is set to a value with decimal places, when the getPrice function is called, then it should return the value with the correct decimal places.

5. Scenario: Test if the getPrice function returns a maximum value.
   Given the price is set to the maximum value that a double can hold, when the getPrice function is called, then it should return the maximum value.

6. Scenario: Test if the getPrice function returns a minimum value.
   Given the price is set to the minimum value that a double can hold, when the getPrice function is called, then it should return the minimum value.

7. Scenario: Test if the getPrice function returns a null value.
   Given the price is set to null, when the getPrice function is called, it should throw a NullPointerException. 

8. Scenario: Test if the getPrice function returns a NaN value. 
   Given the price is set to NaN (Not a Number), when the getPrice function is called, then it should return NaN.

9. Scenario: Test if the getPrice function returns an infinite value.
   Given the price is set to an infinite value, when the getPrice function is called, then it should return the infinite value.
*/
package com.bootexample4.products.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class Product_getPrice_d2cb73a47d_Test {

    private Product product;

    @BeforeEach
    public void setUp() {
        product = new Product();
    }

    @Test
    public void testGetPrice_CorrectValue() {
        double price = 100.0;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }

    @Test
    public void testGetPrice_ZeroValue() {
        assertEquals(0.0, product.getPrice());
    }

    @Test
    public void testGetPrice_NegativeValue() {
        double price = -100.0;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }

    @Test
    public void testGetPrice_DecimalValue() {
        double price = 100.25;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }

    @Test
    public void testGetPrice_MaxValue() {
        double price = Double.MAX_VALUE;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }

    @Test
    public void testGetPrice_MinValue() {
        double price = Double.MIN_VALUE;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }

    @Test
    public void testGetPrice_NullValue() {
        product.setPrice(null);
        assertThrows(NullPointerException.class, () -> product.getPrice());
    }

    @Test
    public void testGetPrice_NaNValue() {
        double price = Double.NaN;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }

    @Test
    public void testGetPrice_InfinityValue() {
        double price = Double.POSITIVE_INFINITY;
        product.setPrice(price);
        assertEquals(price, product.getPrice());
    }
}
