/*
Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Test if the getPrice function returns a correct price value.
   Given a price is set, when the getPrice function is called, then it should return the correct price.

2. Scenario: Test if the getPrice function returns a zero value.
   Given the price is not set, when the getPrice function is called, then it should return a zero value.

3. Scenario: Test if the getPrice function returns a negative value.
   Given the price is set to a negative value, when the getPrice function is called, then it should return the negative value.

4. Scenario: Test if the getPrice function returns a decimal value.
   Given the price is set to a decimal value, when the getPrice function is called, then it should return the decimal value.

5. Scenario: Test if the getPrice function returns a maximum double value.
   Given the price is set to the maximum double value, when the getPrice function is called, then it should return the maximum double value.

6. Scenario: Test if the getPrice function returns a minimum double value.
   Given the price is set to the minimum double value, when the getPrice function is called, then it should return the minimum double value.

7. Scenario: Test if the getPrice function returns a NaN value.
   Given the price is set to a NaN value, when the getPrice function is called, then it should return the NaN value.

8. Scenario: Test if the getPrice function returns an Infinity value.
   Given the price is set to an Infinity value, when the getPrice function is called, then it should return the Infinity value.

9. Scenario: Test if the getPrice function returns a negative Infinity value.
   Given the price is set to a negative Infinity value, when the getPrice function is called, then it should return the negative Infinity value.

10. Scenario: Test if the getPrice function returns a value after the price has been changed.
    Given the price was set to a value, and the price was changed, when the getPrice function is called, then it should return the new price value.
*/
package com.bootexample4.products.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class Product_getPrice_d2cb73a47d_Test {

    private Product product;

    @BeforeEach
    public void setUp() {
        product = new Product();
    }

    @Test
    public void testGetPrice_CorrectPrice() {
        product.setPrice(100.00);
        assertEquals(100.00, product.getPrice());
    }

    @Test
    public void testGetPrice_ZeroValue() {
        assertEquals(0.00, product.getPrice());
    }

    @Test
    public void testGetPrice_NegativeValue() {
        product.setPrice(-100.00);
        assertEquals(-100.00, product.getPrice());
    }

    @Test
    public void testGetPrice_DecimalValue() {
        product.setPrice(99.99);
        assertEquals(99.99, product.getPrice());
    }

    @Test
    public void testGetPrice_MaxDoubleValue() {
        product.setPrice(Double.MAX_VALUE);
        assertEquals(Double.MAX_VALUE, product.getPrice());
    }

    @Test
    public void testGetPrice_MinDoubleValue() {
        product.setPrice(Double.MIN_VALUE);
        assertEquals(Double.MIN_VALUE, product.getPrice());
    }

    @Test
    public void testGetPrice_NaNValue() {
        product.setPrice(Double.NaN);
        assertEquals(Double.NaN, product.getPrice());
    }

    @Test
    public void testGetPrice_InfinityValue() {
        product.setPrice(Double.POSITIVE_INFINITY);
        assertEquals(Double.POSITIVE_INFINITY, product.getPrice());
    }

    @Test
    public void testGetPrice_NegativeInfinityValue() {
        product.setPrice(Double.NEGATIVE_INFINITY);
        assertEquals(Double.NEGATIVE_INFINITY, product.getPrice());
    }

    @Test
    public void testGetPrice_ChangedValue() {
        product.setPrice(200.00);
        product.setPrice(300.00);
        assertEquals(300.00, product.getPrice());
    }
}
