# ********RoostGPT********

# Test generated by RoostGPT for test products-karate using AI Type Open AI and AI Model gpt-4
# 
# Feature file generated for /store/order_post for http method type POST 
# RoostTestHash=340dd2a1e1
# 
# 

# ********RoostGPT********
Feature: Testing /v2/store/order API endpoint

Background:
    * url target
    * header Authorization = { token: '#(authToken)' }

Scenario: Validate successful operation when placing an order for a pet
    Given path '/v2/store/order'
    And request
    """
    {
        "id": 1,
        "petId": 1,
        "quantity": 1,
        "shipDate": "2022-12-12T12:12:12.000Z",
        "status": "placed",
        "complete": false
    }
    """
    When method post
    Then status 200
    And match response ==
    """
    {
        "id": 1,
        "petId": 1,
        "quantity": 1,
        "shipDate": "2022-12-12T12:12:12.000Z",
        "status": "placed",
        "complete": false
    }
    """

Scenario Outline: Validate error when placing an order with invalid input
    Given path '/v2/store/order'
    And request <body>
    When method post
    Then status 400

    Examples:
        | body |
        | { "id": "invalid", "petId": 1, "quantity": 1, "shipDate": "2022-12-12T12:12:12.000Z", "status": "placed", "complete": false } |
        | { "id": 1, "petId": "invalid", "quantity": 1, "shipDate": "2022-12-12T12:12:12.000Z", "status": "placed", "complete": false } |
        | { "id": 1, "petId": 1, "quantity": "invalid", "shipDate": "2022-12-12T12:12:12.000Z", "status": "placed", "complete": false } |
        | { "id": 1, "petId": 1, "quantity": 1, "shipDate": "invalid", "status": "placed", "complete": false } |
        | { "id": 1, "petId": 1, "quantity": 1, "shipDate": "2022-12-12T12:12:12.000Z", "status": "invalid", "complete": false } |
        | { "id": 1, "petId": 1, "quantity": 1, "shipDate": "2022-12-12T12:12:12.000Z", "status": "placed", "complete": "invalid" } |
