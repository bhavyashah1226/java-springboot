# ********RoostGPT********

# Test generated by RoostGPT for test products-karate using AI Type Open AI and AI Model gpt-4
# 
# Feature file generated for /pet_post for http method type POST 
# RoostTestHash=988c5ab2ac
# 
# 

# ********RoostGPT********
Feature: Testing /v2/pet API endpoint

Background:
  * url target
  * def auth = { Authorization: '#(authToken)' }
  * configure headers = auth

Scenario: Add a new pet to the store
  Given path '/v2/pet'
  And request {"id": 1, "category": {"id": 1, "name": "Dog"}, "name": "Tommy", "photoUrls": ["url1", "url2"], "tags": [{"id": 1, "name": "tag1"}], "status": "available"}
  When method post
  Then status 200
  And match response == {"id": '#number', "category": {"id": '#number', "name": '#string'}, "name": '#string', "photoUrls": '#[]', "tags": '#[]', "status": '#string'}

Scenario Outline: Add a new pet to the store with invalid inputs
  Given path '/v2/pet'
  And request <payload>
  When method post
  Then status 405

Examples:
  | payload |
  | {} |
  | {"id": "invalid", "category": {"id": 1, "name": "Dog"}, "name": "Tommy", "photoUrls": ["url1", "url2"], "tags": [{"id": 1, "name": "tag1"}], "status": "available"} |
  | {"id": 1, "category": {"id": "invalid", "name": "Dog"}, "name": "Tommy", "photoUrls": ["url1", "url2"], "tags": [{"id": 1, "name": "tag1"}], "status": "available"} |
  | {"id": 1, "category": {"id": 1, "name": "Dog"}, "name": "Tommy", "photoUrls": ["url1", "url2"], "tags": [{"id": "invalid", "name": "tag1"}], "status": "available"} |
